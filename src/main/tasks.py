from monero.wallet import Wallet, address
from .models import Invoice, User, VPNServer
from django.conf import settings
import celery

from fabric import Connection
from invoke.context import Context
import shutil
import re
from datetime import datetime, timedelta

@celery.shared_task
def update_invoices():
    w = Wallet(port=settings.MONERO_PORT)
    w_addr = w.address()
    # w.refresh()
    unpaid = Invoice.objects.filter(is_paid=False)
    for invoice in unpaid:
        incom = w.incoming(payment_id=invoice.payment_id.hex())
        if len(incom) > 0:
            if (
                incom[0].amount >= invoice.price_xmr
                and w.confirmations(incom[0]) >= settings.MONERO_TX_CONFIRMATIONS
            ):
                invoice.set_paid()

@celery.shared_task
def remove_invoices():
    freshest_datetime = datetime.now()-settings.VPN_INVOICE_EXPIRE_AFTER
    Invoice.objects.filter(created__lte=freshest_datetime).delete()


@celery.shared_task
def activate_service(user_id):
    user = User.objects.get(pk=user_id)
    userdir = settings.VPN_USERDIR / user.username
    local = Context()
    ## regarding potential command injection
    # userdir, userzip are set by admin, and have Path type (safe)
    # user.username - autogenerated alphanumeric (safe)
    # server .ssh_user and .visible_name are set by admin (safe)
    local.run(f'mkdir -p {userdir}')
    for server in VPNServer.objects.all():
        assert bool(re.match(r'^[a-zA-Z0-9]{8}$', user.username))
        with Connection(host=server.ip, user=server.ssh_user, port=server.ssh_port) as conn:
            conn.sudo(f"/home/{server.ssh_user}/openvpn/add-user.sh '{user.username}'", hide=True)
            conn.get(f'/home/{server.ssh_user}/clients/{user.username}.ovpn', local=f'{userdir / server.visible_name}.ovpn')
    shutil.make_archive(settings.VPN_USERZIP / user.username, 'zip', userdir)
    user.status = User.Status.ACTIVE
    user.save()

@celery.shared_task
def tick_balance():
    for user in User.objects.filter(balance_halfdays__gt=0):
        user.balance_halfdays -= 1
        user.save()
        # TODO deactivate service, revoke access if nothing left
        # well I still have around 32 days to implement this lol
